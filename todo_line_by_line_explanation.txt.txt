Line-by-Line Explanation: To-Do List CLI App

 

ðŸ”· class Task:

We define a class named Task â€“ like a mold to create task objects.

 

ðŸ”· def __init__(self, title, completed=False):

This is a constructor â€” it runs automatically when we create a new task.

 

    self.title = title â†’ saves the task name

    self.completed = completed â†’ saves whether the task is done (default is False)

 

ðŸ”· def mark_done(self):

This is a method (a function inside a class).

When called, it sets self.completed = True â†’ it marks the task as done.

 

ðŸ”· def __str__(self):

This tells Python how to display the task when we print it.

    status = "âœ“" if self.completed else "âœ—"

If task is done â†’ show âœ“

If not done â†’ show âœ—

Then we return something like:

    [âœ“] Buy milk

 

ðŸ”· def to_line(self):

This turns the task into a line that can be saved to a file.

Returns something like:

    Buy milk|False

 

ðŸ”· @staticmethod

This means the next function doesn't need self.

 

ðŸ”· def from_line(line):

It takes a line from the file (Buy milk|False) and converts it back to a Task object.

    title, completed = line.strip().split("|")

Splits the line at the pipe |:

    title = Buy milk

    completed = False

Returns:

    Task(title, completed == "True")

 

ðŸ”· FILENAME = "tasks.txt"

This is the name of the file where tasks will be saved.

 

ðŸ”· def load_tasks():

This function reads tasks from the file and returns a list of Task objects.

If the file doesnâ€™t exist (FileNotFoundError), it returns an empty list.

 

ðŸ”· def save_tasks(tasks):

This writes all tasks to the file.

For each task, it calls task.to_line() and saves that as a line.

 

ðŸ”· def show_tasks(tasks):

This prints the current list of tasks to the screen.

If there are no tasks: "No tasks yet."

If there are tasks: it prints each one, numbered 1, 2, 3...

 

ðŸ”· def main():

This is the main part of the program. It shows the menu and waits for the userâ€™s input.

    tasks = load_tasks()  â†’ Loads the tasks from file when the app starts

Then we go into a while True: loop which keeps running until you choose to exit.

 

ðŸ”· Menu Options:

    print("1. Add Task")

    print("2. View Tasks")

    print("3. Mark Task as Done")

    print("4. Exit")

The user types 1, 2, 3, or 4.

Then we do different things based on their choice:

 

ðŸŸ¢ If choice == "1":

- Ask for a task name

- Create a Task object

- Add it to the task list

- Save it to the file

 

ðŸŸ¡ If choice == "2":

- Show the current list of tasks using show_tasks()

 

ðŸ”µ If choice == "3":

- First show the tasks

- Ask which number task to mark as done

- If the number is valid, call mark_done() on it

- Save the updated list

 

ðŸ”´ If choice == "4":

- Exit the loop and print "Goodbye!"

 

ðŸ”· if __name__ == "__main__":

This line means:

Only run main() if this file is being run directly.